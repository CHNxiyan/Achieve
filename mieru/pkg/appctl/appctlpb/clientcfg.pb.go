// Copyright (C) 2021  mieru authors
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v4.22.3
// source: clientcfg.proto

package appctlpb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ClientProfile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Client profile name.
	ProfileName *string `protobuf:"bytes,1,opt,name=profileName,proto3,oneof" json:"profileName,omitempty"`
	// User information.
	User *User `protobuf:"bytes,2,opt,name=user,proto3,oneof" json:"user,omitempty"`
	// A list of servers to connect.
	Servers []*ServerEndpoint `protobuf:"bytes,3,rep,name=servers,proto3" json:"servers,omitempty"`
	// Maximum transmission unit of L2 payload.
	// This setting only applies to UDP protocol egress traffic.
	Mtu *int32 `protobuf:"varint,4,opt,name=mtu,proto3,oneof" json:"mtu,omitempty"`
}

func (x *ClientProfile) Reset() {
	*x = ClientProfile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clientcfg_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientProfile) ProtoMessage() {}

func (x *ClientProfile) ProtoReflect() protoreflect.Message {
	mi := &file_clientcfg_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientProfile.ProtoReflect.Descriptor instead.
func (*ClientProfile) Descriptor() ([]byte, []int) {
	return file_clientcfg_proto_rawDescGZIP(), []int{0}
}

func (x *ClientProfile) GetProfileName() string {
	if x != nil && x.ProfileName != nil {
		return *x.ProfileName
	}
	return ""
}

func (x *ClientProfile) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *ClientProfile) GetServers() []*ServerEndpoint {
	if x != nil {
		return x.Servers
	}
	return nil
}

func (x *ClientProfile) GetMtu() int32 {
	if x != nil && x.Mtu != nil {
		return *x.Mtu
	}
	return 0
}

type ClientAdvancedSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ClientAdvancedSettings) Reset() {
	*x = ClientAdvancedSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clientcfg_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientAdvancedSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientAdvancedSettings) ProtoMessage() {}

func (x *ClientAdvancedSettings) ProtoReflect() protoreflect.Message {
	mi := &file_clientcfg_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientAdvancedSettings.ProtoReflect.Descriptor instead.
func (*ClientAdvancedSettings) Descriptor() ([]byte, []int) {
	return file_clientcfg_proto_rawDescGZIP(), []int{1}
}

type ClientConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A list of known client profiles.
	Profiles []*ClientProfile `protobuf:"bytes,1,rep,name=profiles,proto3" json:"profiles,omitempty"`
	// The active profile name.
	ActiveProfile *string `protobuf:"bytes,2,opt,name=activeProfile,proto3,oneof" json:"activeProfile,omitempty"`
	// The management RPC port that client is listening in localhost.
	RpcPort *int32 `protobuf:"varint,3,opt,name=rpcPort,proto3,oneof" json:"rpcPort,omitempty"`
	// The socks5 port that mieru is listening.
	Socks5Port *int32 `protobuf:"varint,4,opt,name=socks5Port,proto3,oneof" json:"socks5Port,omitempty"`
	// Client advanced settings.
	AdvancedSettings *ClientAdvancedSettings `protobuf:"bytes,5,opt,name=advancedSettings,proto3,oneof" json:"advancedSettings,omitempty"`
	// Client logging level.
	LoggingLevel *LoggingLevel `protobuf:"varint,6,opt,name=loggingLevel,proto3,enum=appctl.LoggingLevel,oneof" json:"loggingLevel,omitempty"`
	// If set, the socks5 port listens to LAN rather than localhost.
	Socks5ListenLAN *bool `protobuf:"varint,7,opt,name=socks5ListenLAN,proto3,oneof" json:"socks5ListenLAN,omitempty"`
	// The port mieru is listening to provide HTTP / HTTPS proxy.
	HttpProxyPort *int32 `protobuf:"varint,8,opt,name=httpProxyPort,proto3,oneof" json:"httpProxyPort,omitempty"`
	// If set, the HTTP proxy port listens to LAN rather than localhost.
	HttpProxyListenLAN *bool `protobuf:"varint,9,opt,name=httpProxyListenLAN,proto3,oneof" json:"httpProxyListenLAN,omitempty"`
}

func (x *ClientConfig) Reset() {
	*x = ClientConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clientcfg_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientConfig) ProtoMessage() {}

func (x *ClientConfig) ProtoReflect() protoreflect.Message {
	mi := &file_clientcfg_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientConfig.ProtoReflect.Descriptor instead.
func (*ClientConfig) Descriptor() ([]byte, []int) {
	return file_clientcfg_proto_rawDescGZIP(), []int{2}
}

func (x *ClientConfig) GetProfiles() []*ClientProfile {
	if x != nil {
		return x.Profiles
	}
	return nil
}

func (x *ClientConfig) GetActiveProfile() string {
	if x != nil && x.ActiveProfile != nil {
		return *x.ActiveProfile
	}
	return ""
}

func (x *ClientConfig) GetRpcPort() int32 {
	if x != nil && x.RpcPort != nil {
		return *x.RpcPort
	}
	return 0
}

func (x *ClientConfig) GetSocks5Port() int32 {
	if x != nil && x.Socks5Port != nil {
		return *x.Socks5Port
	}
	return 0
}

func (x *ClientConfig) GetAdvancedSettings() *ClientAdvancedSettings {
	if x != nil {
		return x.AdvancedSettings
	}
	return nil
}

func (x *ClientConfig) GetLoggingLevel() LoggingLevel {
	if x != nil && x.LoggingLevel != nil {
		return *x.LoggingLevel
	}
	return LoggingLevel_DEFAULT
}

func (x *ClientConfig) GetSocks5ListenLAN() bool {
	if x != nil && x.Socks5ListenLAN != nil {
		return *x.Socks5ListenLAN
	}
	return false
}

func (x *ClientConfig) GetHttpProxyPort() int32 {
	if x != nil && x.HttpProxyPort != nil {
		return *x.HttpProxyPort
	}
	return 0
}

func (x *ClientConfig) GetHttpProxyListenLAN() bool {
	if x != nil && x.HttpProxyListenLAN != nil {
		return *x.HttpProxyListenLAN
	}
	return false
}

var File_clientcfg_proto protoreflect.FileDescriptor

var file_clientcfg_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x63, 0x66, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x06, 0x61, 0x70, 0x70, 0x63, 0x74, 0x6c, 0x1a, 0x0e, 0x65, 0x6e, 0x64, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0d, 0x6c, 0x6f, 0x67, 0x67, 0x69,
	0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc7, 0x01, 0x0a, 0x0d, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x25, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x70,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a,
	0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x61, 0x70,
	0x70, 0x63, 0x74, 0x6c, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x48, 0x01, 0x52, 0x04, 0x75, 0x73, 0x65,
	0x72, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x70, 0x70, 0x63, 0x74, 0x6c, 0x2e, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x07, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x12, 0x15, 0x0a, 0x03, 0x6d, 0x74, 0x75, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x03, 0x6d, 0x74, 0x75, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x07, 0x0a,
	0x05, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x6d, 0x74, 0x75, 0x22, 0x18,
	0x0a, 0x16, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x41, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x64,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x22, 0xdf, 0x04, 0x0a, 0x0c, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x31, 0x0a, 0x08, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x61, 0x70,
	0x70, 0x63, 0x74, 0x6c, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x29, 0x0a, 0x0d,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0d, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x72, 0x70, 0x63, 0x50, 0x6f,
	0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x07, 0x72, 0x70, 0x63, 0x50,
	0x6f, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x73, 0x6f, 0x63, 0x6b, 0x73, 0x35,
	0x50, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x0a, 0x73, 0x6f,
	0x63, 0x6b, 0x73, 0x35, 0x50, 0x6f, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x4f, 0x0a, 0x10, 0x61,
	0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x70, 0x70, 0x63, 0x74, 0x6c, 0x2e, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x41, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x48, 0x03, 0x52, 0x10, 0x61, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65,
	0x64, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a, 0x0c,
	0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x14, 0x2e, 0x61, 0x70, 0x70, 0x63, 0x74, 0x6c, 0x2e, 0x4c, 0x6f, 0x67, 0x67,
	0x69, 0x6e, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x48, 0x04, 0x52, 0x0c, 0x6c, 0x6f, 0x67, 0x67,
	0x69, 0x6e, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x0f, 0x73,
	0x6f, 0x63, 0x6b, 0x73, 0x35, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x4c, 0x41, 0x4e, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x08, 0x48, 0x05, 0x52, 0x0f, 0x73, 0x6f, 0x63, 0x6b, 0x73, 0x35, 0x4c, 0x69,
	0x73, 0x74, 0x65, 0x6e, 0x4c, 0x41, 0x4e, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0d, 0x68, 0x74,
	0x74, 0x70, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x06, 0x52, 0x0d, 0x68, 0x74, 0x74, 0x70, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x50, 0x6f,
	0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x12, 0x68, 0x74, 0x74, 0x70, 0x50, 0x72, 0x6f,
	0x78, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x4c, 0x41, 0x4e, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x08, 0x48, 0x07, 0x52, 0x12, 0x68, 0x74, 0x74, 0x70, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x4c, 0x69,
	0x73, 0x74, 0x65, 0x6e, 0x4c, 0x41, 0x4e, 0x88, 0x01, 0x01, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x42, 0x0a, 0x0a, 0x08,
	0x5f, 0x72, 0x70, 0x63, 0x50, 0x6f, 0x72, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x73, 0x6f, 0x63,
	0x6b, 0x73, 0x35, 0x50, 0x6f, 0x72, 0x74, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x61, 0x64, 0x76, 0x61,
	0x6e, 0x63, 0x65, 0x64, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x42, 0x0f, 0x0a, 0x0d,
	0x5f, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x42, 0x12, 0x0a,
	0x10, 0x5f, 0x73, 0x6f, 0x63, 0x6b, 0x73, 0x35, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x4c, 0x41,
	0x4e, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x68, 0x74, 0x74, 0x70, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x50,
	0x6f, 0x72, 0x74, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x68, 0x74, 0x74, 0x70, 0x50, 0x72, 0x6f, 0x78,
	0x79, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x4c, 0x41, 0x4e, 0x42, 0x2d, 0x5a, 0x2b, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x65, 0x6e, 0x66, 0x65, 0x69, 0x6e, 0x2f,
	0x6d, 0x69, 0x65, 0x72, 0x75, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x61, 0x70, 0x70, 0x63, 0x74, 0x6c,
	0x2f, 0x61, 0x70, 0x70, 0x63, 0x74, 0x6c, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_clientcfg_proto_rawDescOnce sync.Once
	file_clientcfg_proto_rawDescData = file_clientcfg_proto_rawDesc
)

func file_clientcfg_proto_rawDescGZIP() []byte {
	file_clientcfg_proto_rawDescOnce.Do(func() {
		file_clientcfg_proto_rawDescData = protoimpl.X.CompressGZIP(file_clientcfg_proto_rawDescData)
	})
	return file_clientcfg_proto_rawDescData
}

var file_clientcfg_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_clientcfg_proto_goTypes = []interface{}{
	(*ClientProfile)(nil),          // 0: appctl.ClientProfile
	(*ClientAdvancedSettings)(nil), // 1: appctl.ClientAdvancedSettings
	(*ClientConfig)(nil),           // 2: appctl.ClientConfig
	(*User)(nil),                   // 3: appctl.User
	(*ServerEndpoint)(nil),         // 4: appctl.ServerEndpoint
	(LoggingLevel)(0),              // 5: appctl.LoggingLevel
}
var file_clientcfg_proto_depIdxs = []int32{
	3, // 0: appctl.ClientProfile.user:type_name -> appctl.User
	4, // 1: appctl.ClientProfile.servers:type_name -> appctl.ServerEndpoint
	0, // 2: appctl.ClientConfig.profiles:type_name -> appctl.ClientProfile
	1, // 3: appctl.ClientConfig.advancedSettings:type_name -> appctl.ClientAdvancedSettings
	5, // 4: appctl.ClientConfig.loggingLevel:type_name -> appctl.LoggingLevel
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_clientcfg_proto_init() }
func file_clientcfg_proto_init() {
	if File_clientcfg_proto != nil {
		return
	}
	file_endpoint_proto_init()
	file_logging_proto_init()
	file_user_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_clientcfg_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientProfile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clientcfg_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientAdvancedSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clientcfg_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_clientcfg_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_clientcfg_proto_msgTypes[2].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_clientcfg_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_clientcfg_proto_goTypes,
		DependencyIndexes: file_clientcfg_proto_depIdxs,
		MessageInfos:      file_clientcfg_proto_msgTypes,
	}.Build()
	File_clientcfg_proto = out.File
	file_clientcfg_proto_rawDesc = nil
	file_clientcfg_proto_goTypes = nil
	file_clientcfg_proto_depIdxs = nil
}
